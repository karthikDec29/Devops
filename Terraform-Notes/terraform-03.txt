Demonstrating list and terraform variables:
main.tf:

resource "aws_instance" "web" {
  ami               = var.ami
  instance_type     = var.instance_type
  key_name          = var.key
  tags              = var.tags
  count             = length(var.az)
  avalibility_zones = "${element(var.az,count.index)}"
}
========================================== 
terraform.tfvars:
  
ami = "ami-04505e74c0741db8d"
instance_type = "t2.micro"
key = "LevelupDevops"
tags = {
  "Name" =  "Helloworld",
   "createdby" = "terraform",
    "demo"    = "variable"
}
az = ["us-east-1c","us-east-1d"]

=======================================
variables.tf

variable "ami" {
  type = string
}

variable "instance_type" {
  type = string
}
variable "key" {
  type = string
}
variable "tags" {
  type = map(any)
}

variable "az" {
  type = list(any)
}
=======================
output.tf

output "instance_ip" {
  value = aws_instance.web[*].private_ip
}

=================================================

we can pass variables from console by using -var flag


eg:terraform apply -var "instance_type=t2.micro"

We can pass variables by using export as environment variables:

Eg: export TF_VARS_key=LevelupDevops

======================================================
Implicit Dependency:

main.tf

resource "aws_vpc" "my_vpc" {
  cidr_block = "172.16.0.0/16"

  tags = {
    Name = "tf-example"
  }
}

resource "aws_subnet" "my_subnet" {
  vpc_id            = aws_vpc.my_vpc.id
  cidr_block        = "172.16.10.0/24"
  availability_zone = "us-east-1c"

  tags = {
    Name = "tf-example"
  }
}

Here we are using vpc_id while creating subnet , terraform will takecare of this

=================================================
Meta Arguments:helps us in achieving certain requirements within the resource block.


1.Count
2.provider
3.for_each
4.life-cycle
5.depends_on


Count:
------
In Terraform, a resource block actually configures only one infrastructure object by default.
If we want multiple resources with same configurations, we can define the count meta-argument. 
This will reduce the overhead of duplicating the resource block that number of times.

count require a whole number and will then create that resource that number of times. 
To identify each of them, we use the count.index which is the index number corresponds to each resource. 
The index ranges from 0 to count-1.

This argument is specified in resources as well as in modules (Terraform version 0.13+). 
Also, count meta-argument cannot be used with for_each.

Example:
--------

resource "aws_instance" "server" {

  # create four similar EC2 instances
  count = 4

  ami           = "ami-a1b2c3d4"
  instance_type = "t2.micro"

  tags = {
    # Usage of count.index in providing a distinct name for every Instance
    Name = "Server ${count.index}"
  }
}

output "instance_id" {
  # Select all instance id using * in place of index value
  value = aws_instance.server[*].id
}


========================================================================

for_each:
--------

As specified in the count meta-argument, that the default behaviour of a resource is to create a single infrastructure object 
which can be overridden by using count,but there is one more flexible way of doing the same which is by using for_each meta argument.

The for_each meta argument accepts a map or set of strings. 
Terraform will create one instance of that resource for each member of that map or set. 
To identify each member of the for_each block, we have 2 objects:

each.key: The map key or set member corresponding to each member.
each.value: The map value corresponding to each member.
This argument is specified in resources (Terraform version 0.12.6) as well as in modules (Terraform version 0.13+)

Example:
--------

resource "aws_instance" "web" {

 for_each = {
   prod = "t2.micro"
   stage = "t3.small"

}
   ami = "ami-id"
   instance_type = each.value
   tags = {
     Name = "Test-${each.key}"
    }

}


