==============================================================
Service Object
=====================

This is used for network load balancing and port mapping
It uses 3 ports
1 target port:  Pod or container port
2 port:   Service port
3 hostPort:  Host machines port to make it accessable from external network

Service objects are classified into 3 types
1 clusterIP: This is the default type of service object used in
  Kubernetes and it is used when we want the Pods in the cluster to
  communicate with each other and not with extrnal networks

2 nodePort: This is used if we want to access the pods from an extrnal
  network and it also performs network load balancing ie even if a pod
  is running on a specific salve we can access it from other slave in
  the cluster

3 LoadBalancer: This is similar to Nodeport and it is used for external 
  connectivity of a Pod and also network load balancing and it also assigns
  a public ip for all the slave combined together



=============================================================================
Use Case
=================
Create a service defintion file for port mapping an nginx pod

vim pod-defintion1.yml
---
apiVersion: v1
kind: Pod
metadata:
 name: nginx-pod
 labels:
  author: levelup
  type: proxy
spec:
 containers:
  - name: appserver
    image: nginx
=========================================================
vim service1.yml
---
apiVersion: v1
kind: Service
metadata:
 name: nginx-service
spec:
 type: NodePort
 ports:
  - targetPort: 80
    port: 80
    nodePort: 30008
 selector:
  author: levelup
  type: proxy

Create pods from the above pod definition file
kubectl create -f pod-definition1.yml
Create the service from the above service definition file
kubectl create -f service.yml
Now nginx can be accesed from any of the slave
kubectl get nodes -o wide
Take the external ip of any of the nodes:30008


=========================================================================
UseCase
========
Create a pod defintion file to start a httpd pod and assign a service
object of type LoadBalancer

vim pod-defintion5.yml
---
apiVersion: v1
kind: Pod
metadata:
 name: httpd-pod
 labels:
  author: levelup
  type: webserver
spec:
 containers:
  - name: myhttpd
    image: httpd
...

vim service2.yml
apiVersion: v1
kind: Service
metadata:
 name: httpd-service
spec:
 type: LoadBalancer
 ports:
  - targetPort: 80
    port: 80
 selector:
  author: levelup
  type: webserver
...

To deploy
kubectl apply -f pod-defintion5.yml
kubectl apply -f service2.yml

To see the list of object created
kubectl get all
We will see a httpd pod and a service object of type loaf balancer

Go to Services and ingress section
Click on the Public ip that is generated by the Service object
=======================================================================
UseCase
============
Create a postgres-pod and assing a service object of type ClusterIP
vim pod-defintion2.yml
apiVersion: v1
kind: Pod
metadata:
 name: postgres-pod
 labels:
  author: levelup
  type: db
spec:
 containers:
  - name: mydb
    image: postgres
    env:
     - name: POSTGRES_PASSWORD
       value: levelup
     - name: POSTGRES_USER
       value: myuser
     - name: POSTGRES_DB
       value: mydb
...

Create a service defintion file and link with postgres pod
vim service3.yml
apiVersion: v1
kind: Service
metadata:
 name: postgres-service
spec:
 ports:
 - targetPort: 5432
    port: 5432
 selector:
  author: levelup
  type: db
...

To deploy
kubectl apply -f pod-definition2.yml
kubectl apply -f service3.yml

To see all the objects
kubectl get all