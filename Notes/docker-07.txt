Working on docker networks
================================
1 To see the list docker networks
   docker network ls

2 To create a docker network
   docker network create --driver network_type network_name

3 To get detailed info about a network
   docker network inspect network_name/network_id

4 To delete a network
   docker network rm network_name/network_id

5 To connect a running container to a network
   docker network connect network_name/netowork_id container_name/container_id

6 To diconnect a running container to a network
   docker network disconnect network_name/netowork_id container_name/container_id

=========================================================================
Docker Networking
=====================
Docker uses 4 types os networks
1 Bridge: This is the deafult network of docker when contianers are
          running on a single docker host

2 Host: This is used when we want to run a single container on a dockerhost
         and this contianer communicates only with the host machine

3 Null: This is used for creating isolated containers ie these containers
        cannot communicate with th host machine or with other containers

4 Overlay: This is used when containers are running in a distributed environment
           on multiple linux servers




UseCase
===============
Create 2 bridge networks levelup1 and levelup2
Create 2 busybox containers c1,c2 and c3
c1 and c2 should run on levelup1 network and shoul ping each other
c3 should run on levelup2 network and it should not be able to ping c1 or c2
Now put c2 on levelup2 network,since c2 is on both levelup1 and levelup2
networks it should be able to ping to both c1 and c3
but c1 and c3 should not ping each other directly

1 Create 2 bridge networks
  docker network create --driver bridge levelup1
  docker network create --driver bridge levelup2

2 Check the list of available networks
  docker network ls

3 Create a busybox container c1 on levelup1 network
  docker run --name c1 -it --network levelup1 busybox
  Come out of the c1 container without exit ctrl+p,ctrl+q

4 Identify the ipaddress of c1
  docker inspect c1

5 Create another busybox container c2 on levelup1 network
  docker run --name c2 -it --network levelup1 busybox
  ping ipaddress_of_c1    (It will ping)
  Come out of the c2 container without exit ctrl+p,ctrl+q

6 Identify the ipaddress of c2
  docker inspect c2

7 Create another busybox container c3 on levelup2 network
  docker run --name c3 -it --network levelup2 busybox
  ping ipaddress_of_c1  (It should not ping)
  ping ipaddress_of_c2  (It should not ping)
  Come out of the c3 container without exit ctrl+p,ctrl+q

8 Identify the ipaddress of c3
  docker inspect c3 

9 Now attach levelup2 network to c2 container
  docker network connect levelup2 c2

10 Since c2 is now on both levelup1 and levelup2 networks it should ping
   to both c1 and c3 containers
   docker attach c2
   ping ipaddress_of_c1  (It should  ping)
   ping ipaddress_of_c3  (It should  ping)
   Come out of the c2 container without exit ctrl+p,ctrl+q

11 But c1 and c3 should not ping each other
   docker attach c3
   ping ipaddress_of_c1  (It should not ping)


Note: To create network with a specific subnet range
docker network create --driver bridge --subnet=192.168.2.0/24 levelup3

============================================================================
Day 16
==================================================================================
=============================================================================
UseCase
=============
Create a custom bridge network and create a docker compose file
to start postgres and adminer container on the above created
network

1 Create a custom bridge network
  docker network create --driver bridge --subnet 10.0.0.0/24 level

2 Create a docker compose file
  vim docker-compose.yml
---
version: '3.8'

services:
 db:
  image: postgres
  environment:
   POSTGRES_PASSWORD: password
   POSTGRES_USER: myuser
   POSTGRES_DB: mydb

 adminer:
  image: adminer
  ports:
   - 8888:8080

networks:
 default:
  external:
   name: level
...

3 To create the containers
  docker-compose up -d

4 To see if adminer and postgres contianers are created
  docker container ls

5 To check if they are running on levelup network
  docker inspect container_id_from_Step4

======================================================================
UseCase
Create a docker compose file which starts mysql and wordpress as
containers also this compose file should create 2 networks
abc,xyz.On abc network it should run the mysql container
and xyz network it should run the wordpress container

vim docker-compose.yml
version: '3.8'

services:
 db:
  image: mysql:5
  environment:
   MYSQL_ROOT_PASSWORD: password
  networks:
   - abc
 wordpress:
  image: wordpress
  ports:
   - 9090:80
  networks:
   - xyz

networks:
 abc: {}
 xyz: {}
...

------------------------------------------------------------------------------
UseCase
================
Create a docker compose file to start mysql and wordpress as container
it shoudl also create 2 volumes one for wordpress and other for mysql

vim docker-compose.yml
version: '3.8'

services:
 db:
  image: mysql:5
  environment:
   MYSQL_ROOT_PASSWORD: password
  volumes:
   - db:/var/lib/mysql

 wordpress:
  image: wordpress
  ports:
   - 9090:80
  volumes:
   - wordpress:/var/www/html

volumes:
 db:
 wordpress:

To create containers from the above file
docker-compose up -d

Check if 2 new volumes are created
docker volume ls



===========================================================================

UseCase
=================
Create a dockerfile to create a customsied jenkins image
and this dockerfile should be built as image from the docker composefile

vim dockerfile
FROM  jenkins/jenkins
MAINTAINER levelup
USER root
RUN apt-get update
RUN apt-get install -y git maven

vim docker-compose.yml
---
version: '3.8'

services:
 jenkins:
  build: .

 mytomcat:
  image: tomcat
  ports:
   - 8080:8080
...

To create containers from the above file
docker-compose up -d

Check if a new jenkins image has be created
docker images

=========================================================================
Working on docker registry
==========================
This is the location where the docker images are saved
This is of 2 types
1 Public registry
2 Private regsitry

UseCase
Create a customised ubuntu image and upload into the public registry

1 Signup into hub.docker.com

2 Create a customsied ubuntu image
  a) Create a centos container and install git init
     docker run --name u1 -it ubuntu
    apt-get update
    apt-get  install -y  git
    exit

  b) Save this container as an image
     docker commit u1 private_registry/myimage

3 Login into dockerhub
  docker login
  Enter username and password of dockerhub

4  Push the customised image
   docker push private_registry/myimage


========================================================================
Private Registry
=====================
This can be created using a docker image called as "registry"
We can start this as a container and it will allow us to 
push images into the registry

1 Create registry as a container
  docker run --name lr -d -p 5000:5000 registry

2 Download an alpine image
  docker pull nginx

3 Tag the alpine with the local registry
  docker tag alpine localhost:5000/nginx

4 Push the image to local registry
  docker push localhost:5000/nginx