Virtualization
===================
This is the process of running multiple OS's parallelly on
a single pice of h/w.
Here we have h/w(bare metal) on top of which we have host os
and on the host os we install an application called as hypervisor
On the hypervisor we can run any no of OS's as guest OS

The disadvantage of this approach is these application running on the
guest OS have to pass through n number of lavers to access the H/W
resources.

Containarization
======================
Here we have bare metal on top of whcih we install the host Os
and on the hsot OS we install an application called as Docker Engine
On the docker engine we can run any application in the form of containers
Docker is a technology for creating thse containers

Docker achive what is commonly called as "process isolation"
ie all the applications(processes) have some dependency on a specific
OS.This dependency is removed by docker and we can run them on any
OS as containers if we have Docker engine installed

These containers pass through less no of layers to access the h/w resources
also organizations need not spend money on purchasing licenses of different
OS's to maintian various applications

Docker can be used at the the stages of S/W development life cycle
Build---->Ship--->Run



===========================================================================
Docker comes in 2 flavours
Docker CE (Community Edition)
Docker EE (Enterprise Edition)

Setup of Docker on Windows 
==============================
1 Download docker desktop from
  https://www.docker.com/products/docker-desktop

2 Install it

3 Once docker is installed we can use Power shell
  to run the docker commands


===============================================================================


========================================================================

Using AWS
================
1 Login in AWS account

2 Create ane new Ubuntu 20 instance

3 To connect to this ubuntu instance use gitbash
  https://git-scm.com/downloads

=====================================================================\


Installing docker on Linux
================================
1 Open get.docker.com

2 Copy and paste the below 2 commands
  
  curl -fsSL https://get.docker.com -o get-docker.sh
  
  sh get-docker.sh

=================================================================


Images and Containers
===========================
A Docker image is a combination of bin/libs that are necessary
for a s/w application to work.Initially all the s/w's of docker 
are available in the form of docker images

A running instance of an image is called as a container

==========================================================
Docker Host: The server where docker is installed is called
docker host

Docker client: This is CLI of docker which accepts the docker commands
from the users and passes to a background process called docker deamon

Docker deamon: This accepts the commands comming from docker client
and routes them to work on docker images or contaienr or the registry

Docker registry: This is the location where docker images are stored
This if of 2 type
1 Public (hub.docker.com)
2 Private: This is set up on one of our internal servers

=======================================================================

=======================================================================
Important Docker commands
===============================

Working on Docker images
===============================
1 To download a docker image
  docker pull image_name

2 To see the list of all downlaoded images
  docker image ls
  or
  docker images

3 To push an image into docker registry
  docker push image_name

4 To get detailed info about a docker image
  docker image inspect image_name/image_id

5 To delete a docker image
  docker rmi image_name

6 To search for a docker image
  docker search image_name

7 To create an image from a customised container
  docker  commit container_name image_name

8 To create an image from a dockerfile
  docker build -t image_name .

9 To convert an image as a tarfile
  docker image save image_name

10 To create an image again from the above tar file
   docker image load tarfile_name

11 To delete all images
   docker system prune -af

==============================================================================
Working on docker container
====================================
12 To see the list of all running containers
   docker container ls

13 To see the list of all container (running and stopped)
   docker ps -a

14 To see the logs generated by a container
   docker logs container_name/container_id

15 To see the ports used by the container
   docker port container_name/container_id

16 To stop a running container
   docker stop container_name/container_id

17 To start the stopped container
   docker start container_name/container_id

18 To delete a stopped container
   docker rm container_name/container_id

19 To delete a running container
   docker rm -f container_name/container_id

20 To stop all running containers
   docker stop $(docker ps -aq)

21 To delete all stopped containers
   docker rm $(docker ps -aq)

22 To delete all containers(running and stopped)
   docker rm -f $(docker ps -aq)

23 To restart a container
   docker restart container_name/container_id

24 To get detailed info about a container
   docker inspect container_name/container_id

25 To create a container
   docker run image_name/image_id
   Run command options
   ------------------------
   --name: USed to give  a name to the container
   -d : Used to run the container in detached mode in the background
   -it : Used to open interactive terminal in the container
   -e : USed to pass environment variables to a container
   -v : Used to attach volumes to container
   --volumes-from:   Used to create sharable docker volumes
   -p : Used  for port mapping where the container port will be mapped
        with some host port
        Eg: -p 8888:80 Here 80 is the container port(internal port) and
        8888 is the host port(external port)
   -P : Used for automatic port mapping where the container port will be
        mapped with a host port that is greater than 30000
   --link : Used to create a a micro serivces architecture
   --network: Used to run the containers on a specific network
   -rm: Used to delete container on exit
   -m : Used to specifying memory limit on the container
   -c: Used to specify the cpu limit on the container
   -ip: Used to specify ip on a container

============================================================================   

============================================================================= 
26 To come out of a container without exit
   ctrl+p,ctrl+q

27 To go bacvk into the a container that we have come out without exit
   docker attach container_name/container_id

28 To run any application in the container from outside
   docker exec -it container_name/container_id command
   Eg: To open bash shell in a container
   docker exec -it container_name/container_id bash

29 To see the list of processes running in a container
   docker container container_name/container_id top

30 To kill a container abruptly
   docker container kill container_name/container_id

==============================================================================
Working on docker networks
================================
31 To see the list docker networks
   docker network ls

32 To create a docker network
   docker network create --driver network_type network_name

32 To get detailed info about a network
   docker network inspect network_name/network_id

33 To delete a network
   docker network rm network_name/network_id

34 To connect a running container to a network
   docker network connect network_name/netowork_id container_name/container_id

35 To diconnect a running container to a network
   docker network disconnect network_name/netowork_id container_name/container_id 

===============================================================================
Working on docker volumes
=============================
36 To see the list of docker volumes
   docker volume ls

37 To create a volume
   docker volume create volume_name/volume_id

38 To get detailed info about a volume
   docker volume inspect volume_name/volume_id

39 To delete a volume
   docker volume rm volume_name/volume_id

40 To delete multiple unsused volumes
   docker volume prune