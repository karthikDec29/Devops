Maven:

Maven is a popular open-source build tool developed by the Apache Group to build, publish, and deploy several projects at once for better project management. The tool provides allows developers to build and document the lifecycle framework. 

Maven is written in Java and is used to build projects written in C#, Scala, Ruby, etc. Based on the Project Object Model (POM), this tool has made the lives of Java developers easier while developing reports, checks build and testing automation setups. 

Maven focuses on the simplification and standardization of the building process, taking care of the following:

Builds
Documentation
Dependencies
Reports 
SCMs
Distribution
Releases

Mavenâ€™s purpose is to provide developers with:

A comprehensive, maintainable, reusable, and simple model for projects.
A set of tools and plug-ins that can interact with the declarative model.
=================================================================================

Project Object Model (POM)

Maven is so useful thanks to the Project Object Model (POM), which is an XML file that has all the information regarding project and configuration details. The POM has the description of the project, details regarding the versioning, and configuration management of the project. 

The XML file is located in the project home directory. When you execute a task, Maven searches for the POM in the current directory.
==================================================================================
Archetype:

Archetype is a Maven project templating toolkit. An archetype is defined as an original pattern or model from which all other things of the same kind are made.
==================================================================================
Using an Archetype:

To create a new project based on an Archetype, we need to call below command

mvn archetype:generate 

===================================================================================

Guide to naming conventions on groupId, artifactId, and version:

groupId: uniquely identifies project across all projects. A group ID should follow Java's package name rules. This means it starts with a reversed domain name. 

For example,
org.apache.maven, org.apache.commons


artifactId: Is the name of the jar without version. If you created it, then you can choose whatever name you want with lowercase letters and no strange symbols. If it's a third party jar, you have to take the name of the jar as it's distributed.

eg. maven, commons-math

version: if you distribute it, then you can choose any typical version with numbers and dots (1.0, 1.1, 1.0.1, ...). Don't use dates as they are usually associated with SNAPSHOT (nightly) builds. If it's a third party artifact, you have to use their version number whatever it is, and as strange as it can look. 

For example,
2.0, 2.0.1, 1.3.1

=================================================================================
A Build Lifecycle is Made Up of Phases:

Each of these build lifecycles is defined by a different list of build phases, wherein a build phase represents a stage in the lifecycle.

For example, the default lifecycle comprises of the following phases (for a complete list of the lifecycle phases,

validate - validate the project is correct and all necessary information is available

compile - compile the source code of the project

test-compile -	compile the test source code into the test destination directory

test - test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed

package - take the compiled code and package it in its distributable format, such as a JAR.

verify - run any checks on results of integration tests to ensure quality criteria are met

install - install the package into the local repository, for use as a dependency in other projects locally

deploy - done in the build environment, copies the final package to the remote repository for sharing with other developers and projects

clean	remove all files generated by the previous build

=============================================================================================

Maven Repository

A maven repository is a directory of packaged JAR file with pom.xml file. Maven searches for dependencies in the repositories. There are 3 types of maven repository:

Local Repository
Central Repository
Remote Repository

Maven searches for the dependencies in the following order:

Local repository then Central repository then Remote repository.

If dependency is not found in these repositories, maven stops processing and throws an error.

1) Maven Local Repository:

Maven local repository is located in your local system. It is created by the maven when you run any maven command.

By default, maven local repository is %USER_HOME%/.m2 directory.

Update location of Local Repository

We can change the location of maven local repository by changing the settings.xml file. It is located in MAVEN_HOME/conf/settings.xml, for example: E:\apache-maven-3.1.1\conf\settings.xml.

Now change the path to local repository. After changing the path of local repository, it will look like this:

settings.xml

<localRepository>e:/mavenlocalrepository</localRepository>  


2) Maven Central Repository

Maven central repository is located on the web. It has been created by the apache maven community itself.

The path of central repository is: http://repo1.maven.org/maven2/.

The central repository contains a lot of common libraries that can be viewed by this url http://search.maven.org/#browse.

3) Maven Remote Repository

Maven remote repository is located on the web. Most of libraries can be missing from the central repository such as JBoss library etc, so we need to define remote repository in pom.xml file.

Let's see the code to add the jUnit library in pom.xml file.

<dependency>  
      <groupId>junit</groupId>  
      <artifactId>junit</artifactId>  
      <version>4.8.2</version>  
      <scope>test</scope>  
    </dependency>  
========================================================================================
	
	



